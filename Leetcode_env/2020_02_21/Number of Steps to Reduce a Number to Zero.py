# 1342.将数字变成0的操作次数
#
# 给你一个非负整数num ，请你返回将它变成0所需要的步数。 如果当前数字是偶数，你需要把它除以2 ；否则，减去1 。

# 示例1：
# 输入：num = 14
# 输出：6
# 解释：
# 步骤1) 14是偶数，除以2得到7 。
# 步骤2） 7是奇数，减1得到6 。
# 步骤3） 6是偶数，除以2得到3 。
# 步骤4） 3是奇数，减1得到2 。
# 步骤5） 2是偶数，除以2得到1 。
# 步骤6） 1是奇数，减1得到0 。

# 示例2：
# 输入：num = 8
# 输出：4
# 解释：
# 步骤1） 8是偶数，除以2得到4 。
# 步骤2） 4是偶数，除以2得到2 。
# 步骤3） 2是偶数，除以2得到1 。
# 步骤4） 1是奇数，减1得到0 。

# 示例3：
# 输入：num = 123
# 输出：12
#
# 提示：
# 0 <= num <= 10 ^ 6


class Solution:
    def numberOfSteps (self, num: int):
        ans = 0
        while num>0:
            if num%2 == 1:
                num = num - 1
            else:
                num = num//2
            ans = ans + 1
        return ans

sol = Solution()
print(sol.numberOfSteps(123))






