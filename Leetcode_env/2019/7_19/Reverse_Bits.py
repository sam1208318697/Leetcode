# 190. 颠倒二进制位
# 颠倒给定的 32 位无符号整数的二进制位。

# 示例 1：
# 输入: 00000010100101000001111010011100
# 输出: 00111001011110000010100101000000
# 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
#       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。

# 示例 2：
# 输入：11111111111111111111111111111101
# 输出：10111111111111111111111111111111
# 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
#       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。

class Solution:
    # @param n, an integer
    # @return an integer
    def reverseBits(self, n):
        # 缩略写法
        return int(('0'*(32-len(bin(n)[2:])) + bin(n)[2:])[::-1],2)

        # 完整写法
        # 先将十进制数n转换为2进制的字符串s，并将头部的"0b"去掉
        # s = bin(n)[2:]
        # len(s)求出字符串的长度，计算需要补多少个0，然后加在原来s的前面合成新的s
        # s = "0"*( 32-len(s) ) + s
        # s[::-1]将整个s倒置，并使用int函数进行二进制换十进制的操作，并返回
        # return int( s[::-1] , 2 )




sol = Solution()
print(sol.reverseBits(43261596))