# 1093.大样本统计
# 我们对0到255之间的整数进行采样，并将结果存储在数组
# count中：count[k]意味着采样的整数为k。
# 我们以浮点数数组的形式，分别返回样本的最小值、最大值、平均值、中位数和众数。其中，众数是保证唯一的。
# 我们先来回顾一下中位数的知识：
# 如果样本中的元素有序，并且元素数量为奇数时，中位数为最中间的那个元素；
# 如果样本中的元素有序，并且元素数量为偶数时，中位数为中间的两个元素的平均值。

# 示例1：
# 输入：count = [0, 1, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0]
# 输出：[1.00000, 3.00000, 2.37500, 2.50000, 3.00000]

# 示例2：
# 输入：count = [0, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
#             0, 0, 0, 0]
# 输出：[1.00000, 4.00000, 2.18182, 2.00000, 1.00000]

# 提示：
# count.length == 256
# 1 <= sum(count) <= 10 ^ 9
# 计数表示的众数是唯一的
# 答案与真实值误差在10 ^ -5以内就会被视为正确答案

class Solution(object):
    def sampleStats(self, count):
        """
        :type count: List[int]
        :rtype: List[float]
        """
        res = []
        p = [] # 缩略版的count
        account = 0 # 总和
        times = 0 # 总的数字个数
        max_num = 0
        # 最小值
        for i in range(len(count)):
            if count[i] != 0:
                res.append(float(i))
                break

        for i in range(len(count)):
            if count[i] != 0:
                p.append(count[i])
                account += i * count[i]
                times += count[i]
                max_num = i

        # 最大值
        res.append(float(max_num))
        # 平均数
        res.append(account / times)

        # 中位数
        median = 0
        if times % 2 == 0:
            pos = times / 2
            for i in range(len(p)):
                median += p[i]
                if median == pos:
                    res.append((count.index(p[i]) + count.index(p[i + 1])) / 2)
                    break
                elif median > pos:
                    res.append(float(count.index(p[i])))
                    break
                else:
                    pass
        else:
            pos = times // 2
            for i in range(len(p)):
                median += p[i]
                if median >= pos:
                    res.append(float(count.index(p[i])))
                    break
                else:
                    pass
        # 众数
        res.append(float(count.index(max(count))))

        return res



sol = Solution()
print(sol.sampleStats([0,1,3,4,0,0,0]))